plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = 'com.github.getplusm'
description = 'ProtectionBlocks'
version = '2.0.1'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    // PAPI
    maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
    // Holographic Displays
    maven { url = 'https://repo.codemc.io/repository/maven-public/' }
    maven { url = 'https://jitpack.io' }
    // Fancy
    maven { url = 'https://repo.fancyplugins.de/releases' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.2-R0.1-SNAPSHOT'
    // holo
    compileOnly 'me.filoghost.holographicdisplays:holographicdisplays-api:3.0.0'
    compileOnly 'com.github.decentsoftware-eu:decentholograms:2.8.3'
    compileOnly 'de.oliver:FancyHolograms:2.2.0'
    // LP
    compileOnly 'net.luckperms:api:5.4'
    // PAPI
    compileOnly 'me.clip:placeholderapi:2.10.10'
    // Engine
    compileOnly 'com.github.getplusm:PLAZMER-ENGINE:2.4.12'

    compileOnly 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.runtimeClasspath, project.configurations.shadow]
    archiveFileName.set(project.description + '-' + project.version + '.jar')
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

javadoc {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        version = true
    }
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId rootProject.group
            artifactId "protectionblocks"
            version rootProject.version


            def compileClasspathDependencies = configurations.compileClasspath.allDependencies
            compileClasspathDependencies = compileClasspathDependencies
                    .findAll { !(it instanceof ProjectDependency) }

            pom {
                withXml {
                    def dependenciesNode = asNode().children().find {
                        it.name().getQualifiedName().equals('dependencies')
                    }
                    if (dependenciesNode == null) dependenciesNode = asNode().appendNode('dependencies')
                    compileClasspathDependencies.each { dependency ->
                        dependenciesNode.appendNode('dependency').with {
                            appendNode('groupId', dependency.getGroup())
                            appendNode('artifactId', dependency.getName())
                            appendNode('version', dependency.getVersion())
                            appendNode('scope', 'compile')
                        }
                    }
                }
            }

            artifact sourcesJar
            artifact javadocJar
            repositories {
                maven {
                    name = 'jitpack'
                    url = 'https://jitpack.io'
                }
            }
        }
    }
}